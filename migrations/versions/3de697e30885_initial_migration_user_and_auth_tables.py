"""Initial migration - user and auth tables

Revision ID: 3de697e30885
Revises: 
Create Date: 2025-06-26 21:47:28.452667

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '3de697e30885'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('admins',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('hashed_password', sa.String(length=255), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('is_verified', sa.Boolean(), nullable=True),
    sa.Column('role', sa.Enum('SUPER_ADMIN', 'SYSTEM_ADMIN', 'USER_ADMIN', 'CONTENT_ADMIN', 'ANALYTICS_ADMIN', 'SUPPORT_ADMIN', name='adminrole'), nullable=True),
    sa.Column('first_name', sa.String(length=100), nullable=False),
    sa.Column('last_name', sa.String(length=100), nullable=False),
    sa.Column('avatar_url', sa.String(length=500), nullable=True),
    sa.Column('department', sa.String(length=100), nullable=True),
    sa.Column('employee_id', sa.String(length=50), nullable=True),
    sa.Column('permissions', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('admin_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('last_login_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_login_ip', sa.String(length=45), nullable=True),
    sa.Column('failed_login_attempts', sa.String(length=10), nullable=True),
    sa.Column('locked_until', sa.DateTime(timezone=True), nullable=True),
    sa.Column('password_changed_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('created_by_admin_id', sa.UUID(), nullable=True),
    sa.Column('last_activity_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('session_timeout_minutes', sa.String(length=10), nullable=True),
    sa.ForeignKeyConstraint(['created_by_admin_id'], ['admins.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_admin_created_at', 'admins', ['created_at'], unique=False)
    op.create_index('idx_admin_email_active', 'admins', ['email', 'is_active'], unique=False)
    op.create_index('idx_admin_employee_id', 'admins', ['employee_id'], unique=False)
    op.create_index('idx_admin_last_login', 'admins', ['last_login_at'], unique=False)
    op.create_index('idx_admin_role_active', 'admins', ['role', 'is_active'], unique=False)
    op.create_index(op.f('ix_admins_created_at'), 'admins', ['created_at'], unique=False)
    op.create_index(op.f('ix_admins_email'), 'admins', ['email'], unique=True)
    op.create_index(op.f('ix_admins_employee_id'), 'admins', ['employee_id'], unique=True)
    op.create_index(op.f('ix_admins_id'), 'admins', ['id'], unique=False)
    op.create_index(op.f('ix_admins_is_active'), 'admins', ['is_active'], unique=False)
    op.create_index(op.f('ix_admins_is_verified'), 'admins', ['is_verified'], unique=False)
    op.create_index(op.f('ix_admins_last_login_at'), 'admins', ['last_login_at'], unique=False)
    op.create_index(op.f('ix_admins_role'), 'admins', ['role'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('hashed_password', sa.String(length=255), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('is_verified', sa.Boolean(), nullable=True),
    sa.Column('role', sa.Enum('SUPER_ADMIN', 'ADMIN', 'MODERATOR', 'USER', 'GUEST', name='userrole'), nullable=True),
    sa.Column('first_name', sa.String(length=100), nullable=False),
    sa.Column('last_name', sa.String(length=100), nullable=False),
    sa.Column('avatar_url', sa.String(length=500), nullable=True),
    sa.Column('bio', sa.Text(), nullable=True),
    sa.Column('user_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('last_login_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('failed_login_attempts', sa.String(length=10), nullable=True),
    sa.Column('locked_until', sa.DateTime(timezone=True), nullable=True),
    sa.Column('password_changed_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_user_created_at', 'users', ['created_at'], unique=False)
    op.create_index('idx_user_email_active', 'users', ['email', 'is_active'], unique=False)
    op.create_index('idx_user_last_login', 'users', ['last_login_at'], unique=False)
    op.create_index('idx_user_role_active', 'users', ['role', 'is_active'], unique=False)
    op.create_index(op.f('ix_users_created_at'), 'users', ['created_at'], unique=False)
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_is_active'), 'users', ['is_active'], unique=False)
    op.create_index(op.f('ix_users_is_verified'), 'users', ['is_verified'], unique=False)
    op.create_index(op.f('ix_users_last_login_at'), 'users', ['last_login_at'], unique=False)
    op.create_index(op.f('ix_users_role'), 'users', ['role'], unique=False)
    op.create_table('admin_refresh_tokens',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('token', sa.String(length=255), nullable=False),
    sa.Column('admin_id', sa.UUID(), nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('is_revoked', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('last_used_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('user_agent', sa.String(length=500), nullable=True),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.ForeignKeyConstraint(['admin_id'], ['admins.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_admin_refresh_token_admin_active', 'admin_refresh_tokens', ['admin_id', 'is_revoked'], unique=False)
    op.create_index('idx_admin_refresh_token_expires', 'admin_refresh_tokens', ['expires_at'], unique=False)
    op.create_index(op.f('ix_admin_refresh_tokens_admin_id'), 'admin_refresh_tokens', ['admin_id'], unique=False)
    op.create_index(op.f('ix_admin_refresh_tokens_expires_at'), 'admin_refresh_tokens', ['expires_at'], unique=False)
    op.create_index(op.f('ix_admin_refresh_tokens_id'), 'admin_refresh_tokens', ['id'], unique=False)
    op.create_index(op.f('ix_admin_refresh_tokens_is_revoked'), 'admin_refresh_tokens', ['is_revoked'], unique=False)
    op.create_index(op.f('ix_admin_refresh_tokens_token'), 'admin_refresh_tokens', ['token'], unique=True)
    op.create_table('admin_sessions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('session_token', sa.String(length=255), nullable=False),
    sa.Column('admin_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('last_activity_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.String(length=500), nullable=True),
    sa.Column('device_fingerprint', sa.String(length=255), nullable=True),
    sa.ForeignKeyConstraint(['admin_id'], ['admins.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_admin_session_admin_active', 'admin_sessions', ['admin_id', 'is_active'], unique=False)
    op.create_index('idx_admin_session_expires', 'admin_sessions', ['expires_at'], unique=False)
    op.create_index(op.f('ix_admin_sessions_admin_id'), 'admin_sessions', ['admin_id'], unique=False)
    op.create_index(op.f('ix_admin_sessions_expires_at'), 'admin_sessions', ['expires_at'], unique=False)
    op.create_index(op.f('ix_admin_sessions_id'), 'admin_sessions', ['id'], unique=False)
    op.create_index(op.f('ix_admin_sessions_is_active'), 'admin_sessions', ['is_active'], unique=False)
    op.create_index(op.f('ix_admin_sessions_session_token'), 'admin_sessions', ['session_token'], unique=True)
    op.create_table('projects',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('category', sa.String(length=50), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=True),
    sa.Column('progress', sa.Integer(), nullable=True),
    sa.Column('priority', sa.String(length=20), nullable=True),
    sa.Column('owner_id', sa.UUID(), nullable=False),
    sa.Column('settings', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('project_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('location', sa.String(length=255), nullable=True),
    sa.Column('total_file_size', sa.BigInteger(), nullable=True),
    sa.Column('file_count', sa.Integer(), nullable=True),
    sa.Column('image_count', sa.Integer(), nullable=True),
    sa.Column('video_count', sa.Integer(), nullable=True),
    sa.Column('document_count', sa.Integer(), nullable=True),
    sa.Column('processing_started_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('processing_completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('estimated_completion_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_public', sa.Boolean(), nullable=True),
    sa.Column('collaborator_count', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('last_activity_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('archived_at', sa.DateTime(timezone=True), nullable=True),
    sa.CheckConstraint('progress >= 0 AND progress <= 100', name='check_progress_range'),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_project_category', 'projects', ['category'], unique=False)
    op.create_index('idx_project_created_at', 'projects', ['created_at'], unique=False)
    op.create_index('idx_project_owner_status', 'projects', ['owner_id', 'status'], unique=False)
    op.create_index('idx_project_updated_at', 'projects', ['updated_at'], unique=False)
    op.create_index(op.f('ix_projects_created_at'), 'projects', ['created_at'], unique=False)
    op.create_index(op.f('ix_projects_id'), 'projects', ['id'], unique=False)
    op.create_index(op.f('ix_projects_owner_id'), 'projects', ['owner_id'], unique=False)
    op.create_index(op.f('ix_projects_status'), 'projects', ['status'], unique=False)
    op.create_table('refresh_tokens',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('token', sa.String(length=255), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('is_revoked', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('last_used_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('user_agent', sa.String(length=500), nullable=True),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_refresh_token_created', 'refresh_tokens', ['created_at'], unique=False)
    op.create_index('idx_refresh_token_expires', 'refresh_tokens', ['expires_at'], unique=False)
    op.create_index('idx_refresh_token_user_active', 'refresh_tokens', ['user_id', 'is_revoked'], unique=False)
    op.create_index(op.f('ix_refresh_tokens_expires_at'), 'refresh_tokens', ['expires_at'], unique=False)
    op.create_index(op.f('ix_refresh_tokens_id'), 'refresh_tokens', ['id'], unique=False)
    op.create_index(op.f('ix_refresh_tokens_is_revoked'), 'refresh_tokens', ['is_revoked'], unique=False)
    op.create_index(op.f('ix_refresh_tokens_token'), 'refresh_tokens', ['token'], unique=True)
    op.create_index(op.f('ix_refresh_tokens_user_id'), 'refresh_tokens', ['user_id'], unique=False)
    op.create_table('project_collaborators',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('project_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('role', sa.String(length=20), nullable=False),
    sa.Column('permissions', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('invited_by', sa.UUID(), nullable=True),
    sa.Column('invited_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('joined_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['invited_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_project_collaborator_project', 'project_collaborators', ['project_id'], unique=False)
    op.create_index('idx_project_collaborator_unique', 'project_collaborators', ['project_id', 'user_id'], unique=True)
    op.create_index('idx_project_collaborator_user', 'project_collaborators', ['user_id'], unique=False)
    op.create_index(op.f('ix_project_collaborators_id'), 'project_collaborators', ['id'], unique=False)
    op.create_index(op.f('ix_project_collaborators_project_id'), 'project_collaborators', ['project_id'], unique=False)
    op.create_index(op.f('ix_project_collaborators_user_id'), 'project_collaborators', ['user_id'], unique=False)
    op.create_table('upload_sessions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('project_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('session_name', sa.String(length=255), nullable=False),
    sa.Column('total_files', sa.Integer(), nullable=False),
    sa.Column('total_size', sa.BigInteger(), nullable=False),
    sa.Column('status', postgresql.ENUM('PENDING', 'UPLOADING', 'PROCESSING', 'COMPLETED', 'FAILED', 'CANCELLED', name='uploadsessionstatus'), nullable=False),
    sa.Column('uploaded_files', sa.Integer(), nullable=False),
    sa.Column('processed_files', sa.Integer(), nullable=False),
    sa.Column('failed_files', sa.Integer(), nullable=False),
    sa.Column('uploaded_size', sa.BigInteger(), nullable=False),
    sa.Column('upload_progress', sa.Float(), nullable=False),
    sa.Column('processing_progress', sa.Float(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('failed_file_details', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('files',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('project_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('original_filename', sa.String(length=255), nullable=False),
    sa.Column('stored_filename', sa.String(length=255), nullable=False),
    sa.Column('file_path', sa.Text(), nullable=False),
    sa.Column('file_type', postgresql.ENUM('IMAGE', 'VIDEO', 'DOCUMENT', 'GEOSPATIAL', 'ARCHIVE', 'OTHER', name='filetype'), nullable=False),
    sa.Column('mime_type', sa.String(length=100), nullable=False),
    sa.Column('file_size', sa.BigInteger(), nullable=False),
    sa.Column('checksum_md5', sa.String(length=32), nullable=True),
    sa.Column('checksum_sha256', sa.String(length=64), nullable=True),
    sa.Column('virus_scan_status', sa.String(length=20), nullable=True),
    sa.Column('virus_scan_result', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('upload_status', postgresql.ENUM('UPLOADING', 'UPLOADED', 'PROCESSING', 'PROCESSED', 'FAILED', 'DELETED', name='filestatus'), nullable=False),
    sa.Column('processing_status', sa.String(length=20), nullable=True),
    sa.Column('is_enabled', sa.Boolean(), nullable=True),
    sa.Column('file_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('exif_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('geospatial_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('width', sa.Integer(), nullable=True),
    sa.Column('height', sa.Integer(), nullable=True),
    sa.Column('duration_seconds', sa.Integer(), nullable=True),
    sa.Column('frame_rate', sa.Integer(), nullable=True),
    sa.Column('thumbnail_generated', sa.Boolean(), nullable=True),
    sa.Column('preview_generated', sa.Boolean(), nullable=True),
    sa.Column('analysis_completed', sa.Boolean(), nullable=True),
    sa.Column('uploaded_by', sa.UUID(), nullable=False),
    sa.Column('upload_session_id', sa.UUID(), nullable=True),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('processed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_accessed_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['upload_session_id'], ['upload_sessions.id'], ),
    sa.ForeignKeyConstraint(['uploaded_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_file_created_at', 'files', ['created_at'], unique=False)
    op.create_index('idx_file_processing_status', 'files', ['processing_status'], unique=False)
    op.create_index('idx_file_project_type', 'files', ['project_id', 'file_type'], unique=False)
    op.create_index('idx_file_upload_status', 'files', ['upload_status'], unique=False)
    op.create_index('idx_file_uploader', 'files', ['uploaded_by'], unique=False)
    op.create_index(op.f('ix_files_created_at'), 'files', ['created_at'], unique=False)
    op.create_index(op.f('ix_files_file_type'), 'files', ['file_type'], unique=False)
    op.create_index(op.f('ix_files_id'), 'files', ['id'], unique=False)
    op.create_index(op.f('ix_files_processing_status'), 'files', ['processing_status'], unique=False)
    op.create_index(op.f('ix_files_project_id'), 'files', ['project_id'], unique=False)
    op.create_index(op.f('ix_files_uploaded_by'), 'files', ['uploaded_by'], unique=False)
    op.create_index(op.f('ix_files_user_id'), 'files', ['user_id'], unique=False)
    op.create_table('file_thumbnails',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('file_id', sa.UUID(), nullable=False),
    sa.Column('thumbnail_type', sa.String(length=20), nullable=False),
    sa.Column('thumbnail_path', sa.Text(), nullable=False),
    sa.Column('width', sa.Integer(), nullable=False),
    sa.Column('height', sa.Integer(), nullable=False),
    sa.Column('file_size', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['file_id'], ['files.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_file_thumbnail_file_type', 'file_thumbnails', ['file_id', 'thumbnail_type'], unique=False)
    op.create_index(op.f('ix_file_thumbnails_file_id'), 'file_thumbnails', ['file_id'], unique=False)
    op.create_index(op.f('ix_file_thumbnails_id'), 'file_thumbnails', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_file_thumbnails_id'), table_name='file_thumbnails')
    op.drop_index(op.f('ix_file_thumbnails_file_id'), table_name='file_thumbnails')
    op.drop_index('idx_file_thumbnail_file_type', table_name='file_thumbnails')
    op.drop_table('file_thumbnails')
    op.drop_index(op.f('ix_files_user_id'), table_name='files')
    op.drop_index(op.f('ix_files_uploaded_by'), table_name='files')
    op.drop_index(op.f('ix_files_project_id'), table_name='files')
    op.drop_index(op.f('ix_files_processing_status'), table_name='files')
    op.drop_index(op.f('ix_files_id'), table_name='files')
    op.drop_index(op.f('ix_files_file_type'), table_name='files')
    op.drop_index(op.f('ix_files_created_at'), table_name='files')
    op.drop_index('idx_file_uploader', table_name='files')
    op.drop_index('idx_file_upload_status', table_name='files')
    op.drop_index('idx_file_project_type', table_name='files')
    op.drop_index('idx_file_processing_status', table_name='files')
    op.drop_index('idx_file_created_at', table_name='files')
    op.drop_table('files')
    op.drop_table('upload_sessions')
    op.drop_index(op.f('ix_project_collaborators_user_id'), table_name='project_collaborators')
    op.drop_index(op.f('ix_project_collaborators_project_id'), table_name='project_collaborators')
    op.drop_index(op.f('ix_project_collaborators_id'), table_name='project_collaborators')
    op.drop_index('idx_project_collaborator_user', table_name='project_collaborators')
    op.drop_index('idx_project_collaborator_unique', table_name='project_collaborators')
    op.drop_index('idx_project_collaborator_project', table_name='project_collaborators')
    op.drop_table('project_collaborators')
    op.drop_index(op.f('ix_refresh_tokens_user_id'), table_name='refresh_tokens')
    op.drop_index(op.f('ix_refresh_tokens_token'), table_name='refresh_tokens')
    op.drop_index(op.f('ix_refresh_tokens_is_revoked'), table_name='refresh_tokens')
    op.drop_index(op.f('ix_refresh_tokens_id'), table_name='refresh_tokens')
    op.drop_index(op.f('ix_refresh_tokens_expires_at'), table_name='refresh_tokens')
    op.drop_index('idx_refresh_token_user_active', table_name='refresh_tokens')
    op.drop_index('idx_refresh_token_expires', table_name='refresh_tokens')
    op.drop_index('idx_refresh_token_created', table_name='refresh_tokens')
    op.drop_table('refresh_tokens')
    op.drop_index(op.f('ix_projects_status'), table_name='projects')
    op.drop_index(op.f('ix_projects_owner_id'), table_name='projects')
    op.drop_index(op.f('ix_projects_id'), table_name='projects')
    op.drop_index(op.f('ix_projects_created_at'), table_name='projects')
    op.drop_index('idx_project_updated_at', table_name='projects')
    op.drop_index('idx_project_owner_status', table_name='projects')
    op.drop_index('idx_project_created_at', table_name='projects')
    op.drop_index('idx_project_category', table_name='projects')
    op.drop_table('projects')
    op.drop_index(op.f('ix_admin_sessions_session_token'), table_name='admin_sessions')
    op.drop_index(op.f('ix_admin_sessions_is_active'), table_name='admin_sessions')
    op.drop_index(op.f('ix_admin_sessions_id'), table_name='admin_sessions')
    op.drop_index(op.f('ix_admin_sessions_expires_at'), table_name='admin_sessions')
    op.drop_index(op.f('ix_admin_sessions_admin_id'), table_name='admin_sessions')
    op.drop_index('idx_admin_session_expires', table_name='admin_sessions')
    op.drop_index('idx_admin_session_admin_active', table_name='admin_sessions')
    op.drop_table('admin_sessions')
    op.drop_index(op.f('ix_admin_refresh_tokens_token'), table_name='admin_refresh_tokens')
    op.drop_index(op.f('ix_admin_refresh_tokens_is_revoked'), table_name='admin_refresh_tokens')
    op.drop_index(op.f('ix_admin_refresh_tokens_id'), table_name='admin_refresh_tokens')
    op.drop_index(op.f('ix_admin_refresh_tokens_expires_at'), table_name='admin_refresh_tokens')
    op.drop_index(op.f('ix_admin_refresh_tokens_admin_id'), table_name='admin_refresh_tokens')
    op.drop_index('idx_admin_refresh_token_expires', table_name='admin_refresh_tokens')
    op.drop_index('idx_admin_refresh_token_admin_active', table_name='admin_refresh_tokens')
    op.drop_table('admin_refresh_tokens')
    op.drop_index(op.f('ix_users_role'), table_name='users')
    op.drop_index(op.f('ix_users_last_login_at'), table_name='users')
    op.drop_index(op.f('ix_users_is_verified'), table_name='users')
    op.drop_index(op.f('ix_users_is_active'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_index(op.f('ix_users_created_at'), table_name='users')
    op.drop_index('idx_user_role_active', table_name='users')
    op.drop_index('idx_user_last_login', table_name='users')
    op.drop_index('idx_user_email_active', table_name='users')
    op.drop_index('idx_user_created_at', table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_admins_role'), table_name='admins')
    op.drop_index(op.f('ix_admins_last_login_at'), table_name='admins')
    op.drop_index(op.f('ix_admins_is_verified'), table_name='admins')
    op.drop_index(op.f('ix_admins_is_active'), table_name='admins')
    op.drop_index(op.f('ix_admins_id'), table_name='admins')
    op.drop_index(op.f('ix_admins_employee_id'), table_name='admins')
    op.drop_index(op.f('ix_admins_email'), table_name='admins')
    op.drop_index(op.f('ix_admins_created_at'), table_name='admins')
    op.drop_index('idx_admin_role_active', table_name='admins')
    op.drop_index('idx_admin_last_login', table_name='admins')
    op.drop_index('idx_admin_employee_id', table_name='admins')
    op.drop_index('idx_admin_email_active', table_name='admins')
    op.drop_index('idx_admin_created_at', table_name='admins')
    op.drop_table('admins')
    # ### end Alembic commands ### 