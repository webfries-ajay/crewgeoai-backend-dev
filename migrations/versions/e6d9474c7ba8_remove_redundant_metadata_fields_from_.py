"""remove_redundant_metadata_fields_from_files

Revision ID: e6d9474c7ba8
Revises: c4b9bcc5209c
Create Date: 2025-06-27 22:36:26.934161

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'e6d9474c7ba8'
down_revision = 'c4b9bcc5209c'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('file_metadata',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('file_id', sa.UUID(), nullable=False),
    sa.Column('camera_make', sa.String(length=100), nullable=True),
    sa.Column('camera_model', sa.String(length=100), nullable=True),
    sa.Column('lens_model', sa.String(length=100), nullable=True),
    sa.Column('focal_length', sa.Float(), nullable=True),
    sa.Column('aperture', sa.Float(), nullable=True),
    sa.Column('shutter_speed', sa.String(length=20), nullable=True),
    sa.Column('iso_speed', sa.Integer(), nullable=True),
    sa.Column('latitude', sa.Float(), nullable=True),
    sa.Column('longitude', sa.Float(), nullable=True),
    sa.Column('altitude', sa.Float(), nullable=True),
    sa.Column('gps_precision', sa.Float(), nullable=True),
    sa.Column('has_gps', sa.Boolean(), nullable=True),
    sa.Column('date_taken', sa.DateTime(timezone=True), nullable=True),
    sa.Column('date_modified', sa.DateTime(timezone=True), nullable=True),
    sa.Column('timezone_offset', sa.String(length=10), nullable=True),
    sa.Column('color_space', sa.String(length=20), nullable=True),
    sa.Column('white_balance', sa.String(length=50), nullable=True),
    sa.Column('flash_used', sa.Boolean(), nullable=True),
    sa.Column('exposure_mode', sa.String(length=50), nullable=True),
    sa.Column('metering_mode', sa.String(length=50), nullable=True),
    sa.Column('image_quality', sa.String(length=20), nullable=True),
    sa.Column('compression_ratio', sa.Float(), nullable=True),
    sa.Column('bit_depth', sa.Integer(), nullable=True),
    sa.Column('is_professional_grade', sa.Boolean(), nullable=True),
    sa.Column('equipment_category', sa.String(length=50), nullable=True),
    sa.Column('has_faces', sa.Boolean(), nullable=True),
    sa.Column('has_text', sa.Boolean(), nullable=True),
    sa.Column('has_vehicles', sa.Boolean(), nullable=True),
    sa.Column('has_buildings', sa.Boolean(), nullable=True),
    sa.Column('has_vegetation', sa.Boolean(), nullable=True),
    sa.Column('metadata_completeness_score', sa.Float(), nullable=True),
    sa.Column('extraction_confidence', sa.Float(), nullable=True),
    sa.Column('raw_exif_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('raw_iptc_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('raw_xmp_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('processed_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('llm_ready', sa.Boolean(), nullable=True),
    sa.Column('token_count_estimate', sa.Integer(), nullable=True),
    sa.Column('metadata_summary', sa.Text(), nullable=True),
    sa.Column('extraction_method', sa.String(length=50), nullable=True),
    sa.Column('processing_time_ms', sa.Integer(), nullable=True),
    sa.Column('extraction_errors', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['file_id'], ['files.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_file_metadata_created_at'), 'file_metadata', ['created_at'], unique=False)
    op.create_index(op.f('ix_file_metadata_file_id'), 'file_metadata', ['file_id'], unique=True)
    op.create_index(op.f('ix_file_metadata_has_gps'), 'file_metadata', ['has_gps'], unique=False)
    op.create_index(op.f('ix_file_metadata_id'), 'file_metadata', ['id'], unique=False)
    op.create_index(op.f('ix_file_metadata_is_professional_grade'), 'file_metadata', ['is_professional_grade'], unique=False)
    op.create_index(op.f('ix_file_metadata_llm_ready'), 'file_metadata', ['llm_ready'], unique=False)
    op.drop_column('files', 'file_metadata')
    op.drop_column('files', 'exif_data')
    op.drop_column('files', 'geospatial_data')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('files', sa.Column('geospatial_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('files', sa.Column('exif_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('files', sa.Column('file_metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_file_metadata_llm_ready'), table_name='file_metadata')
    op.drop_index(op.f('ix_file_metadata_is_professional_grade'), table_name='file_metadata')
    op.drop_index(op.f('ix_file_metadata_id'), table_name='file_metadata')
    op.drop_index(op.f('ix_file_metadata_has_gps'), table_name='file_metadata')
    op.drop_index(op.f('ix_file_metadata_file_id'), table_name='file_metadata')
    op.drop_index(op.f('ix_file_metadata_created_at'), table_name='file_metadata')
    op.drop_table('file_metadata')
    # ### end Alembic commands ### 